{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","placeholder","GifGridItem","img","className","src","url","alt","title","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,SAEPN,EAAWO,OAAOC,OAAS,IAC5BV,GAAe,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACvCR,EAAc,OAOd,2BACIS,KAAK,OACLC,MAAUX,EACVY,SArBc,SAAET,GACxBF,EAAeE,EAAEU,OAAOF,QAqBhBG,YAAa,oBC1BhBC,EAAc,SAAEC,GAIzB,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,yBAAKJ,UAAU,QACX,2BAAID,EAAIK,U,uBCRXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbL,EAFa,iDAEoCM,UAAUF,GAF9C,+DAGAG,MAAMP,GAHN,cAGbQ,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAf,GAAQ,IAAD,EAC1B,MAAO,CACHgB,GAAIhB,EAAIgB,GACRX,MAAOL,EAAIK,MACXF,IAAG,UAAEH,EAAIiB,cAAN,aAAE,EAAYC,iBAAiBf,QAVvB,kBAgBZW,GAhBY,4CAAH,sDCEPK,EAAU,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAAgB,ECAf,SAAEA,GAAe,IAAD,EAEdxB,mBAAS,CAC/B8B,KAAM,GACNO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmCxC,OA3BAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GAEHC,YAAY,WAERrC,QAAQC,IAAImC,GACZH,EAAS,CACLT,KAAMY,EACNL,SAAS,MAGd,UAIZ,CAAEb,IAUEc,ED9B0BM,CAAcpB,GAAlCU,EAL0B,EAK/BJ,KAAaO,EALkB,EAKlBA,QAYrB,OACI,oCACI,wBAAInB,UAAU,qCAAd,IAAqDM,EAArD,KAEEa,GAAW,uBAAGnB,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEPgB,EAAOF,KAAK,SAAAf,GAAG,OACX,kBAAC,EAAD,eACI4B,IAAK5B,EAAIgB,IACLhB,UE5BnB6B,EAAe,WAAM,MAGM9C,mBAAS,CAAC,UAHhB,mBAGvB+C,EAHuB,KAGXhD,EAHW,KAU9B,OACI,oCACI,uCACA,yDACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQgD,EAAWf,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIqB,IAAOrB,EACPA,SAAYA,U,MCrBxCwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.ca452717.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // si no habia '' era undefined y salia error\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value )\r\n        // console.log(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('hecho')\r\n        // cats es el estado anterior\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit= {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n                placeholder= 'Buscar gif...'\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n  };","import React from 'react'\r\n\r\n//https://animate.style/\r\n\r\nexport const GifGridItem = ( img ) => {\r\n\r\n    //console.log( img );\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={img.url} alt={img.title}/>\r\n            <div className='name'>\r\n                <p>{img.title}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//parte funcional\r\n\r\n// peticion http para traer imagenes de la categoria\r\n// encode sirve para cambiar los espacios por +,%20\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=6qkK31du1CIFUZrj7YjNZfPtDdJByNtW`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs)\r\n    // setImages( gifs )\r\n    return gifs;\r\n}","import React from 'react'\r\n//, { useState, useEffect }\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    //const [count, setCount] = useState(0);\r\n    //const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // [] indica q se ejecuando cuando se renderiza por primera vez y ya no mas\r\n    // salio un warning porque si cambia la categoria deberia renderizar nuevmnte\r\n    /*\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( setImages );\r\n    }, [ category ])\r\n    */\r\n    // getGifs()\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn' > {category} </h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash' >Loading</p> }\r\n\r\n            <div className='card-grid' >\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }         \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n/*\r\n    debajo de h3\r\n    <h2>{count}</h2>\r\n    <button onClick= {()=> setCount(count+1) }>+1</button>\r\n*/\r\n\r\n/*\r\n<ol>\r\n    {\r\n        images.map( img => (\r\n            <li  key={img.id}>{img.title}</li>\r\n        ))\r\n    }\r\n</ol>\r\n*/\r\n\r\n/*\r\n{\r\n    images.map( img => (\r\n        <GifGridItem \r\n            key={img.id}\r\n            {...img}\r\n        />\r\n    ))\r\n}  \r\n*/","import { useState, useEffect } from \"react\"\r\n\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// se uso rafc , los hooks pueden tener su estado\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // los efectos no pueden ser async pero si en su int tiene then\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setTimeout( () => {\r\n                    \r\n                    console.log(imgs)\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 3000);\r\n\r\n            });\r\n\r\n    }, [ category ])\r\n\r\n    /*\r\n    setTimeout( () => {\r\n        setstate({\r\n            data: [1,2,3,4,5],\r\n            loading: false\r\n        })\r\n    }, 3000);\r\n    */\r\n    return state; // es un objeto con data y loading\r\n\r\n}\r\n","// rafc\r\nimport React, { useState } from 'react'\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['Panda', 'Sailon Moon', 'gatos']\r\n    const [categories, setCategories] = useState(['Panda']);\r\n\r\n    // const handleAdd = () => {\r\n    //     /*setCategories([...categories , 'Candy'])*/\r\n    //    setCategories( cats => [...cats , 'Mon'] )\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif App</h2>\r\n            <p>Encuentra los mejores gifs</p>\r\n            <AddCategory setCategories= { setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key = {category}\r\n                            category = {category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n/*\r\n    categories.map( category => {\r\n        return <li key={ category } > { category } </li>\r\n    })\r\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}